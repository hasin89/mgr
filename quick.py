# -*- coding: utf-8 -*-
'''
Created on Mar 1, 2015

@author: Tomasz
'''
from geoobjects import Recovery
import numpy as np
import calculations.calibration3 as calibration
import cv2

results_folder = 'results'

writepath = results_folder + '/'
calibration.writepath = writepath


filenames =  ['results/calibration/0_1.jpg', 'results/calibration/0_2.jpg']
shape = (3072, 4608)
dist0 = np.array([[-0.03683894,  0.14350011, 0.00586631, -0.03864333, -0.00821061]])
mtx0 = np.array(    [[  3.84928126e+03,   0.00000000e+00,   1.37612362e+03],
                     [  0.00000000e+00,   3.86643040e+03,   2.15897594e+03],
                     [  0.00000000e+00,   0.00000000e+00,   1.00000000e+00]] )

up =        [[[710.0, 250.0], [668.0, 235.0], [626.0, 221.0], [584.0, 207.0], [544.0, 194.0], [504.0, 181.0], [463.0, 168.0], [426.0, 156.0], [388.0, 143.0], [350.0, 132.0]], [[728.0, 304.0], [686.0, 289.0], [644.0, 275.0], [603.0, 261.0], [562.0, 247.0], [522.0, 234.0], [483.0, 221.0], [445.0, 208.0], [407.0, 195.0], [368.0, 183.0]], [[745.0, 358.0], [703.0, 342.0], [662.0, 328.0], [620.0, 313.0], [580.0, 299.0], [540.0, 285.0], [502.0, 272.0], [463.0, 259.0], [424.0, 246.0], [388.0, 234.0]], [[762.0, 410.0], [721.0, 394.0], [679.0, 380.0], [637.0, 365.0], [598.0, 351.0], [558.0, 336.0], [520.0, 323.0], [481.0, 309.0], [443.0, 296.0], [406.0, 283.0]], [[778.0, 462.0], [737.0, 446.0], [696.0, 430.0], [654.0, 416.0], [615.0, 401.0], [575.0, 387.0], [537.0, 372.0], [499.0, 359.0], [460.0, 346.0], [424.0, 332.0]], [[794.0, 512.0], [753.0, 496.0], [712.0, 481.0], [670.0, 465.0], [631.0, 451.0], [592.0, 436.0], [554.0, 422.0], [516.0, 407.0], [479.0, 394.0], [442.0, 379.0]], [[810.0, 562.0], [768.0, 546.0], [728.0, 529.0], [687.0, 515.0], [647.0, 499.0], [609.0, 484.0], [571.0, 469.0], [534.0, 455.0], [496.0, 441.0], [460.0, 427.0]], [[503.0, 856.0], [462.0, 835.0], [422.0, 816.0], [383.0, 798.0], [345.0, 779.0], [307.0, 762.0], [270.0, 745.0], [234.0, 728.0], [199.0, 712.0], [165.0, 696.0]], [[551.0, 818.0], [510.0, 798.0], [470.0, 779.0], [430.0, 762.0], [392.0, 744.0], [354.0, 727.0], [317.0, 710.0], [281.0, 694.0], [245.0, 678.0], [211.0, 663.0]], [[599.0, 781.0], [557.0, 763.0], [517.0, 744.0], [477.0, 727.0], [439.0, 710.0], [401.0, 693.0], [363.0, 676.0], [328.0, 660.0], [291.0, 644.0], [256.0, 629.0]], [[645.0, 746.0], [604.0, 728.0], [564.0, 710.0], [523.0, 693.0], [485.0, 676.0], [447.0, 659.0], [410.0, 643.0], [373.0, 628.0], [336.0, 612.0], [302.0, 597.0]], [[692.0, 713.0], [650.0, 694.0], [610.0, 676.0], [569.0, 659.0], [530.0, 643.0], [492.0, 626.0], [454.0, 611.0], [418.0, 595.0], [382.0, 580.0], [346.0, 565.0]], [[737.0, 679.0], [694.0, 661.0], [655.0, 643.0], [615.0, 626.0], [575.0, 610.0], [536.0, 595.0], [499.0, 578.0], [462.0, 564.0], [426.0, 549.0], [390.0, 535.0]], [[780.0, 645.0], [739.0, 627.0], [698.0, 611.0], [659.0, 594.0], [619.0, 578.0], [581.0, 562.0], [542.0, 547.0], [506.0, 532.0], [469.0, 518.0], [434.0, 504.0]]]
down =      [[[603, 201], [670, 237], [737, 275], [806, 314], [877, 353], [949, 394], [1022, 437], [1099, 480], [1177, 524], [1256, 571]], [[604, 261], [670, 297], [736, 335], [804, 374], [873, 414], [945, 456], [1017, 499], [1092, 542], [1168, 586], [1246, 633]], [[605, 319], [669, 357], [735, 395], [801, 434], [870, 474], [940, 516], [1012, 558], [1085, 602], [1160, 647], [1237, 693]], [[605, 376], [669, 413], [733, 452], [798, 492], [866, 532], [935, 574], [1006, 616], [1078, 660], [1152, 705], [1227, 752]], [[606, 432], [669, 469], [732, 508], [796, 548], [862, 589], [930, 631], [1000, 673], [1072, 716], [1143, 763], [1219, 808]], [[606, 486], [667, 524], [730, 563], [793, 603], [859, 644], [926, 686], [994, 728], [1065, 771], [1136, 817], [1210, 863]], [[606, 539], [666, 578], [728, 616], [791, 656], [855, 697], [922, 738], [989, 781], [1058, 825], [1129, 870], [1202, 916]], [[231, 917], [290, 962], [351, 1008], [414, 1055], [477, 1104], [543, 1155], [610, 1206], [678, 1259], [749, 1314], [821, 1371]], [[288, 867], [347, 910], [408, 956], [470, 1002], [534, 1050], [599, 1099], [666, 1149], [735, 1201], [806, 1254], [878, 1309]], [[343, 818], [403, 861], [464, 905], [526, 950], [590, 997], [655, 1044], [722, 1093], [791, 1144], [861, 1195], [933, 1249]], [[397, 771], [457, 813], [518, 856], [580, 900], [644, 945], [709, 991], [776, 1039], [845, 1088], [915, 1138], [987, 1190]], [[451, 726], [510, 766], [571, 807], [633, 850], [697, 894], [762, 939], [829, 986], [898, 1034], [968, 1082], [1040, 1133]], [[503, 681], [562, 720], [623, 760], [685, 802], [749, 845], [814, 889], [881, 934], [950, 980], [1020, 1028], [1092, 1077]], [[554, 636], [613, 674], [674, 714], [737, 754], [800, 796], [865, 839], [932, 882], [1000, 928], [1070, 975], [1142, 1023]]]


real = [[[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 2.0, 0.0], [0.0, 3.0, 0.0], [0.0, 4.0, 0.0], [0.0, 5.0, 0.0], [0.0, 6.0, 0.0], [0.0, 7.0, 0.0], [0.0, 8.0, 0.0], [0.0, 9.0, 0.0]], [[1.0, 0.0, 0.0], [1.0, 1.0, 0.0], [1.0, 2.0, 0.0], [1.0, 3.0, 0.0], [1.0, 4.0, 0.0], [1.0, 5.0, 0.0], [1.0, 6.0, 0.0], [1.0, 7.0, 0.0], [1.0, 8.0, 0.0], [1.0, 9.0, 0.0]], [[2.0, 0.0, 0.0], [2.0, 1.0, 0.0], [2.0, 2.0, 0.0], [2.0, 3.0, 0.0], [2.0, 4.0, 0.0], [2.0, 5.0, 0.0], [2.0, 6.0, 0.0], [2.0, 7.0, 0.0], [2.0, 8.0, 0.0], [2.0, 9.0, 0.0]], [[3.0, 0.0, 0.0], [3.0, 1.0, 0.0], [3.0, 2.0, 0.0], [3.0, 3.0, 0.0], [3.0, 4.0, 0.0], [3.0, 5.0, 0.0], [3.0, 6.0, 0.0], [3.0, 7.0, 0.0], [3.0, 8.0, 0.0], [3.0, 9.0, 0.0]], [[4.0, 0.0, 0.0], [4.0, 1.0, 0.0], [4.0, 2.0, 0.0], [4.0, 3.0, 0.0], [4.0, 4.0, 0.0], [4.0, 5.0, 0.0], [4.0, 6.0, 0.0], [4.0, 7.0, 0.0], [4.0, 8.0, 0.0], [4.0, 9.0, 0.0]], [[5.0, 0.0, 0.0], [5.0, 1.0, 0.0], [5.0, 2.0, 0.0], [5.0, 3.0, 0.0], [5.0, 4.0, 0.0], [5.0, 5.0, 0.0], [5.0, 6.0, 0.0], [5.0, 7.0, 0.0], [5.0, 8.0, 0.0], [5.0, 9.0, 0.0]], [[6.0, 0.0, 0.0], [6.0, 1.0, 0.0], [6.0, 2.0, 0.0], [6.0, 3.0, 0.0], [6.0, 4.0, 0.0], [6.0, 5.0, 0.0], [6.0, 6.0, 0.0], [6.0, 7.0, 0.0], [6.0, 8.0, 0.0], [6.0, 9.0, 0.0]], [[7.0, 0.0, 7.0], [7.0, 1.0, 7.0], [7.0, 2.0, 7.0], [7.0, 3.0, 7.0], [7.0, 4.0, 7.0], [7.0, 5.0, 7.0], [7.0, 6.0, 7.0], [7.0, 7.0, 7.0], [7.0, 8.0, 7.0], [7.0, 9.0, 7.0]], [[7.0, 0.0, 6.0], [7.0, 1.0, 6.0], [7.0, 2.0, 6.0], [7.0, 3.0, 6.0], [7.0, 4.0, 6.0], [7.0, 5.0, 6.0], [7.0, 6.0, 6.0], [7.0, 7.0, 6.0], [7.0, 8.0, 6.0], [7.0, 9.0, 6.0]], [[7.0, 0.0, 5.0], [7.0, 1.0, 5.0], [7.0, 2.0, 5.0], [7.0, 3.0, 5.0], [7.0, 4.0, 5.0], [7.0, 5.0, 5.0], [7.0, 6.0, 5.0], [7.0, 7.0, 5.0], [7.0, 8.0, 5.0], [7.0, 9.0, 5.0]], [[7.0, 0.0, 4.0], [7.0, 1.0, 4.0], [7.0, 2.0, 4.0], [7.0, 3.0, 4.0], [7.0, 4.0, 4.0], [7.0, 5.0, 4.0], [7.0, 6.0, 4.0], [7.0, 7.0, 4.0], [7.0, 8.0, 4.0], [7.0, 9.0, 4.0]], [[7.0, 0.0, 3.0], [7.0, 1.0, 3.0], [7.0, 2.0, 3.0], [7.0, 3.0, 3.0], [7.0, 4.0, 3.0], [7.0, 5.0, 3.0], [7.0, 6.0, 3.0], [7.0, 7.0, 3.0], [7.0, 8.0, 3.0], [7.0, 9.0, 3.0]], [[7.0, 0.0, 2.0], [7.0, 1.0, 2.0], [7.0, 2.0, 2.0], [7.0, 3.0, 2.0], [7.0, 4.0, 2.0], [7.0, 5.0, 2.0], [7.0, 6.0, 2.0], [7.0, 7.0, 2.0], [7.0, 8.0, 2.0], [7.0, 9.0, 2.0]], [[7.0, 0.0, 1.0], [7.0, 1.0, 1.0], [7.0, 2.0, 1.0], [7.0, 3.0, 1.0], [7.0, 4.0, 1.0], [7.0, 5.0, 1.0], [7.0, 6.0, 1.0], [7.0, 7.0, 1.0], [7.0, 8.0, 1.0], [7.0, 9.0, 1.0]]]

modelPoints = [
[(431,1174),(479,1311),(385,1290),(338,1156)],
[(1877,1635),(1880,1804),(2037,1872),(2038,1701)]
]

trueOffsets = [(62, 1617), (1424, 2240)]

calibrationTool = Recovery.thirdDianensionREcovery()
imagePoints2, mtx, dist, rvecs, tvecs, left_real, images = calibrationTool.calibrateMulti(filenames, shape, [up, down], real, trueOffsets, True, mtx0 ,dist0)

print imagePoints2.T

P1,P2,F = calibrationTool.getFundamental( imagePoints2, modelPoints, rvecs, tvecs, mtx, dist, np.array(left_real), images )

print 'projections:'
print P1
print P2

# n = 144

oPoints1 = np.array(modelPoints[0],dtype='float32')
oPoints2 = np.array(modelPoints[1],dtype='float32')
        
imagePoints3 = np.append(imagePoints2[0], oPoints1, 0)
imagePoints4 = np.append(imagePoints2[1], oPoints2, 0)

n = imagePoints3.shape[0]
m = oPoints1.shape[0]
         
rrr2 = cv2.triangulatePoints(P1,P2,imagePoints3.T , imagePoints4.T)
vfunc = np.vectorize(round)
points = cv2.convertPointsFromHomogeneous(rrr2.T)

np.set_printoptions(precision=6,suppress=True)
 
points2 = vfunc(points,2)
print 'recovered2:\n', points2.reshape(n,3)[-m:]


lines1, lines2 = calibrationTool.calculateEpilines(oPoints1, oPoints2, F, images[0], images[1])


# print 'mtx =', mtx
# print 'dist =', dist
# print 'r1 =', rvecs[0]
# print 'r2 =', rvecs[1]
# print 't1 =', tvecs[0]
# print 't2 =', tvecs[1]
# print 'real =', real
# print 'offsets', trueOffsets
# print 'imagePoints2', imagePoints2
    
calibration.saveParameter(mtx, 'macierz')

calibration.saveParameter(dist, 'dist')
calibration.saveParameter(np.array(rvecs), 'R')
calibration.saveParameter(np.array(tvecs), 'T')
calibration.saveParameter(np.array(real), 'real')
calibration.saveParameter(np.array(trueOffsets), 'TrueOffset')
calibration.saveParameter(imagePoints2, 'imagePoints2')

mtx = calibration.loadParameter('macierz')
dist = calibration.loadParameter('dist')
a = calibration.loadParameter('R')
b = calibration.loadParameter('T')
c = calibration.loadParameter('real')
d = calibration.loadParameter('TrueOffset')
e = calibration.loadParameter('imagePoints2')
# print 'mtx', mtx[0]
# 
# print 'dist', dist[0]
# 
# print rvecs[0]
# print tvecs[0]
# print 'R', a[0][0]
# print 'T', b[0][0]
# print 'real', c[0].tolist()
# print 'offsets', d[0].tolist()
# print 'imgpoints', e[0]

mtx = mtx[0]
dist = dist[0]
rvecs = a[0]
tvecs = b[0]
real = c[0].tolist()
offsets = d[0].tolist()
imagePoints2 = e[0]